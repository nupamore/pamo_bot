name: Go

on:
  push:
    branches: [ golang ]
  pull_request:
    branches: [ golang ]

jobs:

  build:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v2
    - name: Set up Go
      uses: actions/setup-go@v2
      with:
        go-version: 1.14
        
    - name: Secret configs
      shell: bash
      env:
        DOTENV: ${{ secrets.DOTENV }}
        SQLBOILER_TOML: ${{ secrets.SQLBOILER_TOML }}
      run: |
        cd configs
        echo "$DOTENV" > .env
        echo "$SQLBOILER_TOML" > sqlboiler.toml

    - name: Render models
      run: |
        go get github.com/volatiletech/sqlboiler/v4
        go get github.com/volatiletech/sqlboiler/v4/drivers/sqlboiler-mysql
        sqlboiler mysql --config configs/sqlboiler.toml

    - name: Test
      run: go test -v cmd/bot/bot.go
      
  deploy:
    runs-on: ubuntu-latest
    needs: [build]
    steps:
    - uses: actions/checkout@v2
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v1
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ap-northeast-2

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - name: Secret configs
      shell: bash
      env:
        DOTENV: ${{ secrets.DOTENV }}
        SQLBOILER_TOML: ${{ secrets.SQLBOILER_TOML }}
      run: |
        cd configs
        echo "$DOTENV" > .env
        echo "$SQLBOILER_TOML" > sqlboiler.toml
      
    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        ECR_REPOSITORY: pamo_bot
        IMAGE_TAG: latest
      run: |
        docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
